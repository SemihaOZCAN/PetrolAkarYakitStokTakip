<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>